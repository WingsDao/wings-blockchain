name: Tests & CrossBuild & DockerBuild

on: [push]

jobs:
  golangci:
    name: Linter checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.26
          args: --exclude 'unused' --timeout=10m

  test-build:
    name: Tests & CrossBuild
    runs-on: ubuntu-18.04
    steps:
    - name: Set GOPATH
      run: |
        echo "::set-env name=GOPATH::${{ github.workspace }}/go"
        echo "::add-path::${{ github.workspace }}/go/bin"
      shell: bash

    - name: Install Go 1.14.1
      uses: actions/setup-go@v1
      with:
        go-version: 1.14.1
      id: go

    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: go/src/github.com/${{ github.repository }}

    - name: Get dependencies
      run: |
        cd go/src/github.com/${{ github.repository }}
        go mod download
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Make binaries for integration tests
      run: |
        cd go/src/github.com/${{ github.repository }}
        make

    - name: Run UNIT tests
      run: |
        cd go/src/github.com/${{ github.repository }}
        go test -v ./... --tags=unit

    - name: Run CLI tests
      run: |
        cd go/src/github.com/${{ github.repository }}
        go test -v ./... --tags=cli

    - name: Run REST tests
      run: |
        cd go/src/github.com/${{ github.repository }}
        go test -v ./... --tags=rest

    - name: Run INTEG tests
      run: |
        # Build DVM Docker tag used for integ tests
        export TAG=${DEFAULT_TAG}

        export REPO_TAG="${GITHUB_REF##*/}"
        echo "REPO_TAG: ${REPO_TAG}"
        if [[ "${REPO_TAG}" =~ ^v[0-9]+.[0-9]+.[0-9]+$ ]]; then
            export TAG="release-${REPO_TAG%.*}"
        elif [[ "${REPO_TAG}" =~ ^release-v[0-9]+.[0-9]+$ ]]; then
            export TAG="${REPO_TAG}"
        fi
        echo "TAG: ${TAG}"
        #

        docker login -u ${OWN_REGISTRY_USR} --password-stdin ${REGISTRY} <<< ${OWN_REGISTRY_PWD}
        docker image pull ${REGISTRY}/dfinance/dvm:${TAG}
        cd go/src/github.com/${{ github.repository }}
        go test -v ./... --tags=integ
        docker logout
      env:
        DEFAULT_TAG: master
        REGISTRY: ${{ secrets.OWN_REGISTRY }}
        OWN_REGISTRY_USR: ${{ secrets.OWN_REGISTRY_USR }}
        OWN_REGISTRY_PWD: ${{ secrets.OWN_REGISTRY_PWD }}

    - name: Run Sentry INTEG tests
      run: |
        cd go/src/github.com/${{ github.repository }}
        go test -v ./... --tags=integ_sentry
      env:
        DN_SENTRY_DSN: ${{ secrets.SENTRY_TEST_DSN }}
        DN_SENTRY_TEST_TOKEN: ${{ secrets.DN_SENTRY_TEST_TOKEN }}

    - name: Make binaries crossbuild
      run: |
        cd go/src/github.com/${{ github.repository }}
        make binaries

    - name: GitHub Release
      uses: softprops/action-gh-release@v1
      if: success() && startsWith(github.ref, 'refs/tags/')
      with:
        draft: true
        files: |
          builds/dncli-*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    name: Docker Build
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - name: '[OwnRegistry] Build and push docker image'
      uses: dfinance/gh-actions@master
      with:
        name: registry.wings.toys/dfinance/dnode
        username: ${{ secrets.OWN_REGISTRY_USR }}
        password: ${{ secrets.OWN_REGISTRY_PWD }}
        dockerfile: ./.build/Dockerfile
        build_params: --build-arg CI_PIPELINE_ID=${GITHUB_RUN_ID} --build-arg CI_COMMIT_REF_NAME=${GITHUB_REF} --build-arg CI_COMMIT_SHA=${GITHUB_SHA}
        registry: registry.wings.toys
        cache: true

    - name: '[DockerHub] Build and push docker image'
      uses: dfinance/gh-actions@master
      # if: success() && startsWith(github.ref, 'refs/tags/')
      with:
        name: dfinance/dnode
        username: ${{ secrets.DH_REGISTRY_USR }}
        password: ${{ secrets.DH_REGISTRY_PWD }}
        dockerfile: ./.build/Dockerfile
        build_params: --build-arg CI_PIPELINE_ID=${GITHUB_RUN_ID} --build-arg CI_COMMIT_REF_NAME=${GITHUB_REF} --build-arg CI_COMMIT_SHA=${GITHUB_SHA}
        cache: true
