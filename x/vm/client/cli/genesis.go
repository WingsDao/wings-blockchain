package cli

import (
	"encoding/json"

	"github.com/cosmos/cosmos-sdk/codec"
	"github.com/cosmos/cosmos-sdk/server"
	"github.com/cosmos/cosmos-sdk/x/genutil"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/tendermint/tendermint/libs/cli"

	"github.com/dfinance/dnode/helpers"
	"github.com/dfinance/dnode/x/vm/internal/types"
)

// AddGenesisWSFromFileCmd return genesis cmd which adds writeSets from file.
// File is generated by DVM stdlib-builder app and contains writeSets of standard library.
func AddGenesisWSFromFileCmd(ctx *server.Context, cdc *codec.Codec) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "read-genesis-write-set [writeSetJsonFile]",
		Short:   "Read write sets from JSON file and place them into genesis state",
		Example: "read-genesis-write-set ./write_set.json",
		Args:    cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			// setup viper config
			config := ctx.Config
			config.SetRoot(viper.GetString(cli.HomeFlag))

			// parse inputs
			jsonContent, err := helpers.ParseFilePath("writeSetJsonFile", args[0], helpers.ParamTypeCliArg)
			if err != nil {
				return err
			}

			var genesisState types.GenesisState
			if err := json.Unmarshal(jsonContent, &genesisState); err != nil {
				return err
			}

			// retrieve the app state
			genFile := config.GenesisFile()
			appState, genDoc, err := genutil.GenesisStateFromGenFile(cdc, genFile)
			if err != nil {
				return err
			}

			genesisStateBz := cdc.MustMarshalJSON(genesisState)
			appState[types.ModuleName] = genesisStateBz

			appStateJson, err := cdc.MarshalJSON(appState)
			if err != nil {
				return err
			}
			genDoc.AppState = appStateJson

			return genutil.ExportGenesisFile(genDoc, genFile)
		},
	}
	helpers.BuildCmdHelp(cmd, []string{
		"path to JSON file (github.com/dfinance/dnode/x/vm/internal/keeper/genesis_ws.json)",
	})

	return cmd
}
