// Genesis block related commands for VM module.
package cli

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"

	"github.com/cosmos/cosmos-sdk/codec"
	"github.com/cosmos/cosmos-sdk/server"
	"github.com/cosmos/cosmos-sdk/x/genutil"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/tendermint/tendermint/libs/cli"
	tmTypes "github.com/tendermint/tendermint/types"

	"github.com/dfinance/dnode/x/vm/internal/types"
)

// Reading genesis state from file generated by Move VM.
// File contains write set operations for standard libraries.
func GenesisWSFromFile(ctx *server.Context, cdc *codec.Codec) *cobra.Command {
	return &cobra.Command{
		Use:     "read-genesis-write-set [writeSetJsonFile]",
		Example: "read-genesis-write-set ./write_set.json",
		Short:   "Read write set from json file and place into genesis state, if write set already exists - will be rewritten",
		Args:    cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			config := ctx.Config
			config.SetRoot(viper.GetString(cli.HomeFlag))

			file, err := os.Open(args[0])
			if err != nil {
				return fmt.Errorf("%s argument %q: %w", "writeSetJsonFile", args[0], err)
			}
			defer file.Close()

			jsonContent, err := ioutil.ReadAll(file)
			if err != nil {
				return err
			}

			var genesisState types.GenesisState
			if err := json.Unmarshal(jsonContent, &genesisState); err != nil {
				return err
			}

			genFile := config.GenesisFile()
			genDoc, err := tmTypes.GenesisDocFromFile(genFile)
			if err != nil {
				return err
			}

			appState, err := genutil.GenesisStateFromGenDoc(cdc, *genDoc)
			if err != nil {
				return err
			}

			genesisStateBz := cdc.MustMarshalJSON(genesisState)
			appState[types.ModuleName] = genesisStateBz

			appStateJson, err := cdc.MarshalJSON(appState)
			if err != nil {
				return err
			}

			genDoc.AppState = appStateJson

			return genutil.ExportGenesisFile(genDoc, genFile)
		},
	}
}
